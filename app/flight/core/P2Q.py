from qiskit import QuantumCircuit
import numpy as np
import math
from qiskit import transpile
from qiskit_aer import AerSimulator
from qiskit.visualization import plot_histogram

class P2Q:    
    def __init__(self, simulator) -> None:
        self.simulator = simulator
        self.circuit = None
        self.shots = 1000
    
    def build_circuit(self, states):
        # print(type(states), len(states))
        states = [1/i for i in states]
        # Deal with improper number of passed states
        nq = np.log2(len(states))
        if not(nq.is_integer()):
            n = 2**(math.ceil(nq)) - len(states)
            for i in range(n):
                states.append(0)
        # Calculate normalizatrion factor
        sm = 0
        for x in states:
            sm += x**2
        norm = sm**0.5
        # assign circuit to self.circuit
        states = np.array(states)
        circuit = QuantumCircuit(np.log2(len(states)))      
        circuit.prepare_state(states/norm, [i for i in range(int(np.log2(len(states))))])
        circuit.measure_all()
        self.circuit = transpile(circuit, self.simulator)
    
    def result(self):
        job = self.simulator.run(self.circuit, shots=self.shots, dynamic=True)

        # Get the results and display them
        exp_result = job.result()
        exp_counts = exp_result.get_counts()
        # plot_histogram(exp_counts)
        return max(exp_counts, key=exp_counts.get)
    

if __name__ == '__main__':
    data =[442414.3920089205, 1455938000.6213799, 2294727.2727453187, 1457790313.5021162, 22040.857710901866, 1455517627.0870817, 274929647.13419443, 1730425233.3635652, 42903.18905736909, 1455538489.4184282, 274950509.4655409, 1730446095.6949117, 567.9832692603462, 350424.6952621285, 152615.0835355376, 502471.79552840575, 73693.4720702514, 423550.1840631196, 225740.57233652862, 575597.2843293968, 1678374.4344745502, 2028231.1464674184, 1830421.5347408275, 2180278.2467336957, 1189.2007877201527, 1455496775.4301586, 51924529.06088959, 1507420115.2902606, 442425.9070099988, 52365765.76711186, 442441.7904801502, 52365781.65058201, 2294738.787746397, 54218078.647848256, 2294754.6712165484, 54218094.53131841, 6665.0805691441365, 51930004.940671004, 6701.628051026247, 51930041.488152884, 274914271.3570527, 326837611.21715456, 274914307.9045346, 326837647.76463646, 22051.880887282507, 51945391.74098915, 22067.764357433916, 51945407.6244593, 274929658.1573708, 326852998.0174727, 274929674.040841, 326853013.90094286, 73.94309855268924, 349930.65509142086, 805085.8026611761, 1154942.5146540443, 274907680.2195821, 275257536.93157494, 275712692.0791447, 276062548.7911376, 42914.212233749735, 51966254.072335616, 42930.09570390115, 51966269.95580576, 274950520.48871726, 326873860.34881914, 274950536.37218744, 326873876.2322893, 1398.6402084801414, 51924738.50031035, 1414.5236786315515, 51924754.383780494, 51924738.50031035, 103848078.36041221, 51924754.383780494, 103848094.24388236, 1802.3930937879522, 351659.1050866561, 51925142.25319565, 52274998.96518852, 1838.9405756700626, 351695.6525685382, 51925178.80067753, 52275035.5126704, 2148.7645463073377, 51925488.62464817, 352005.4765391755, 52275345.336641036, 2185.312028189448, 51925525.17213005, 352042.0240210576, 52275381.884122916, 1556.0073918612677, 1455497142.2367628, 119475909.20012054, 1574971495.4294915, 1592.554873743378, 1455497178.7842445, 119475945.74760242, 1574971531.9769733, 406.3162306154625, 350263.02822348365, 51923746.17633248, 52273602.88832535, 1455495992.5456014, 1455845849.2575943, 1507419332.4057033, 1507769189.1176963, 627.7731804942777, 51923967.633282356, 350484.4851733624, 52273824.34527522, 1455496214.0025513, 1507419553.8626533, 1455846070.7145443, 1507769410.5746462, 27.41996731983671, 1455495613.6493382, 119474380.612696, 1574969966.842067, 1455495613.6493382, 2910991199.878709, 1574969966.842067, 3030465553.0714374]
    p2q = P2Q(AerSimulator(method='statevector'))
    p2q.build_circuit(data)
    print(int(p2q.result(),2))